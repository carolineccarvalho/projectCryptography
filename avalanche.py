# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zLADd_cTUt8v1Srp9BtunNCK6omds-Zv
"""

import pandas as pd

def ip_to_binary(ip):
    """Converte um endereço IP para sua representação binária de 32 bits."""
    octets = ip.split('.')
    binary_ip = ''.join(f'{int(octet):08b}' for octet in octets)
    return binary_ip

def bit_flip_percentage(original_ip, anonymized_ip):
    """Calcula a porcentagem de bits diferentes entre dois endereços IP binários."""
    flips = sum(1 for o, a in zip(original_ip, anonymized_ip) if o != a)
    return (flips / len(original_ip)) * 100

def analyze_bit_flips(original_file, anonymized_file, ip_column):
    """Analisa a porcentagem de flips de bits entre endereços IP originais e anonimizados.

    Args:
        original_file (str): Caminho do dataset original.
        anonymized_file (str): Caminho do dataset anonimizado.
        ip_column (str): Nome da coluna contendo os endereços IP.

    Returns:
        float: Porcentagem média de flips de bits entre os datasets.
    """
    # Carregar os datasets
    original_df = pd.read_csv(original_file,sep=';')
    anonymized_df = pd.read_csv(anonymized_file,sep=';')


    # Verificar se a coluna existe em ambos os datasets
    if ip_column not in original_df.columns or ip_column not in anonymized_df.columns:
        raise ValueError(f"A coluna '{ip_column}' não foi encontrada em um dos arquivos.")

    total_flips = 0
    count = 0

    for original_ip, anonymized_ip in zip(original_df[ip_column], anonymized_df[ip_column]):
        original_bin = ip_to_binary(original_ip)
        anonymized_bin = ip_to_binary(anonymized_ip)

        # Garantir que ambos os IPs são válidos e do mesmo comprimento
        if len(original_bin) == len(anonymized_bin):
            total_flips += bit_flip_percentage(original_bin, anonymized_bin)
            count += 1

    return total_flips / count if count > 0 else 0


if __name__ == "__main__":
    original_file = "4.csv"  # Caminho para o dataset original
    anonymized_file = "anom4.csv"  # Caminho para o dataset anonimizado
    ip_column = "IP.src"  # Nome da coluna de endereços IP

    try:
        avg_flip_percentage = analyze_bit_flips(original_file, anonymized_file, ip_column)
        print(f"Porcentagem média de flips de bits: {avg_flip_percentage:.2f}%")
    except Exception as e:
        print(f"Erro: {e}")