# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mi7sEgJnK4wOKzaOWFzaxGgfLZ1nz7BT

# Data leakage

Experiment setup: test with 10%...50% attacker knoledge, 100 times
"""

import pandas as pd
import ipaddress
import tensorflow as tf
import numpy as np
from scipy.stats import entropy

"""Create a anonymized list and original list"""

dec_to_bin = lambda ip: bin(int(ipaddress.ip_address(ip)))
bin_to_list = lambda x: [int(d) for d in str(x)]

def transform_binary(ip):
    binary = dec_to_bin(ip)[2:]

    while(len(binary)!=32):
            binary = '0' + binary

    list_binary = bin_to_list(binary)
    return list_binary

df_orig = pd.read_csv('partes_000 (1).csv',on_bad_lines='skip', sep=";")
df_anom = pd.read_csv('anom.csv',on_bad_lines='skip', sep=",")

listaOrig = []
vistos = set()
orig = df_orig["_ws.col.SA"]
for elemento in orig:
    if elemento not in vistos:
        listaOrig.append(np.array(transform_binary(elemento)).reshape(1, -1) )
        vistos.add(elemento)


listaAnom = []
vistos = set()
anom = df_anom["_ws.col.SA"]
for elemento in anom:
    if elemento not in vistos:
        listaAnom.append(np.array(transform_binary(elemento)).reshape(1, -1) )
        vistos.add(elemento)

"""Define percent = i"""

i = 0.1

tenPorcent = int(len(listaAnom)*i)
input_data = listaOrig[:tenPorcent]
output_data = listaAnom[:tenPorcent]

prev = listaOrig[tenPorcent:]
right = listaAnom[tenPorcent:]

input_data_reshaped = np.array(input_data).reshape((len(input_data), 32, 1))
output_data_reshaped = np.array(output_data).reshape((len(output_data), 32, 1))

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

qtd = []
for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))
print(qtd)

"""2 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""3 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""4 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""5 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""6 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""7 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""8 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""9 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""10 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""11 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""12 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""13 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""14 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""15 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""16 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""17 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""18 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""19 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""20 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""21 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""22 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""23 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""24 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""25 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""26 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""27 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""28 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""29 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""30 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""31 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""32 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""33 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""34 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""35 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""36 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""37 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""38 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""39 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""40 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""41 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""42 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""43 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""44 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""45 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""46 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""47 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""48 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""49 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""50 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""51 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""52 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""53 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""54 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""55 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""56 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""57 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""58 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""59 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""60 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""61 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""62 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""63 time"""

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""64 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""65 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""66 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""67 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""68 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""69 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""70 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""71 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""72 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""73 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""74 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""75 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""76 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""77 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""78 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""79 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""80 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""81 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""82 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""83 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""84 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""85 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""86 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""87 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""88 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""89 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""90 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""91 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""92 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""93 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""94 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""95 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""96 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""97 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""98 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""99 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""100 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""101 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""102 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

"""103 time"""

model = tf.keras.Sequential([
    tf.keras.layers.LSTM(64, input_shape=(32, 1), activation='relu'),
    tf.keras.layers.Dense(32, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(input_data_reshaped, output_data_reshaped, epochs=100)

result_prev = []
for elemento in prev:
    predicted_binary = model.predict(elemento)
    predicted_binary_rounded = (predicted_binary > 0.5).astype(int)
    result_prev.append(predicted_binary_rounded)

for i in range(0, len(prev)):
    qtd.append(entropy(np.array(result_prev[i][0]),base=2))

qtd = np.array(qtd)
print("media")
print(np.mean(qtd))
print("desvio padrao")
print(np.std(qtd))
print("tamanho")
print(len(qtd))